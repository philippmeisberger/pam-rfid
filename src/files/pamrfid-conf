#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
PAM RFID configuration program

Copyright 2014 Philipp Meisberger <team@pm-codeworks.de>,
               Bastian Raschke <bastian.raschke@posteo.de>
All rights reserved.
"""

import argparse
import hashlib
import uuid
import os
import pwd
from configparser import ConfigParser

from pamrfid import __version__ as VERSION
from pamrfid import CONFIG_FILE
from pyrfid.pyrfid import PyRfid


class PamRfid:
    """
    PAM RFID configuration program.

    The PyRfid library instance
    @var PyRfid __rfid

    Config instance
    @var Config __config
    """

    __rfid = None
    __config = None

    def __init__(self):
        """
        Constructor

        """

        ## Tries to read configuration
        try:
            ## Checks if path/file is readable
            if ( os.access(CONFIG_FILE, os.R_OK) == False ):
                raise Exception('The configuration file "' + CONFIG_FILE + '" is not readable!')

            self.__config = ConfigParser()
            self.__config.read(CONFIG_FILE)

        except Exception as e:
            print('[Exception] ' + str(e))
            exit(1)

        try:
            ## Gets connection values
            port = self.__config.get('PyRfid', 'port')
            baudRate = int(self.__config.get('PyRfid', 'baudRate'), 10)

            ## Tries to establish connection
            self.__rfid = PyRfid(port, baudRate)

        except Exception as e:
            print('[Exception] The RFID sensor could not be initialized: ' + str(e))
            exit(1)

    def __showConfirmationDialog(self, question = ''):
        """
        Shows confirmation dialog.

        @param string question
        @return boolean
        """

        answer = input(question + ' (Y/n)')
        return ( answer in ['y', 'Y', ''] )

    def addUser(self, userName):
        """
        Enrolls new RFID tag and adds user to PAM RFID.

        @param string userName
        @return boolean
        """

        ## Checks if user is root
        if ( os.geteuid() != 0 ):
            print('[Error] You need to have root privileges to add a user!')
            return False

        ## Checks if the the user is not already added
        if ( self.__config.has_option('Users', userName) == True ):
            print('[Error] The user "' + userName + '" is already added!')
            return False

        ## Confirmation dialog
        if ( self.__showConfirmationDialog('Are you sure you want to add the user "' + userName + '"?') == False ):
            print('Adding user canceled.')
            return False

        ## Tries to bind a tag to a user
        try:
            ## Check if system user exists?
            pwd.getpwnam(userName)

            print('Waiting for tag...')

            ## Read out tag data
            if ( self.__rfid.readTag() != True ):
                raise Exception('User aborted!')

            ## Generates salt
            salt = uuid.uuid4().hex

            ## Calculates salted hash of tag
            tagHash = hashlib.sha256(salt.encode() + self.__rfid.rawTag.encode()).hexdigest()

            ## The new user information list
            userData = (
                salt,
                tagHash,
            )

            ## Adds user to configuration file
            self.__config.set('Users', userName, ','.join(userData))

            if ( os.access(CONFIG_FILE, os.W_OK) == True ):
                f = open(CONFIG_FILE, 'w')
                self.__config.write(f)
                f.close()
                print('The user "' + userName + '" has been added successfully!')
            else:
                raise Exception('The configuration could not be written!')

        except Exception as e:
            print('[Exception] Error while adding user: ' + str(e))
            return False

        return True

    def removeUser(self, userName):
        """
        Removes RFID tag from configuration.

        @param string userName
        @return boolean
        """

        ## Checks if user is root
        if ( os.geteuid() != 0 ):
            print('[Error] You need to have root privileges to remove a user!')
            return False

        ## Checks if the the user was already added
        if ( self.__config.has_option('Users', userName) == False ):
            print('[Error] The user "' + userName + '" is not added!')
            return False

        ## Confirmation dialog
        if ( self.__showConfirmationDialog('Are you sure you want to remove the user "' + userName + '"?') == False ):
            print('Removing user canceled.')
            return False

        ## Tries to delete tag
        try:
            ## Removes entries from configuration file
            if ( self.__config.remove_option('Users', userName) == True ) and ( os.access(CONFIG_FILE, os.W_OK) == True ):
                f = open(CONFIG_FILE, 'w')
                self.__config.write(f)
                f.close()
                print('The user "' + userName + '" has been removed successfully!')
            else:
                raise Exception('The configuration file could not be written!')

        except Exception as e:
            print('[Exception] Error while removing user: ' + str(e))
            return False

        return True

    def checkUser(self, userName):
        """
        Do a RFID simulation for a given user.

        @param string userName
        @return boolean
        """

        ## Checks if the the user was already added
        if ( self.__config.has_option('Users', userName) == False ):
            print('[Error] The user "' + userName + '" is not added!')
            return False

        ## Tries to get user information
        try:
            userData = self.__config.get('Users', userName).split(',')

            ## Validates user information
            if ( len(userData) != 2 ):
                raise Exception('The user information of "' + userName + '" is invalid!')

            salt = userData[0]
            expectedTagHash = userData[1]

        except Exception as e:
            print('[Exception] ' + str(e))
            return False

        ## Tries to check RFID
        try:
            print('Waiting for tag...')

            ## Read out tag data
            if ( self.__rfid.readTag() != True ):
                raise Exception('User aborted!')

            ## Show additional information
            print('------------------------')
            print('Tag ID:       ' + self.__rfid.tagId)
            print('Tag type:     ' + self.__rfid.tagType)
            print('------------------------')

            ## Calculates hash of tag ID
            print('Calculating hash...')
            tagHash = hashlib.sha256(salt.encode() + self.__rfid.rawTag.encode()).hexdigest()

            print('Checking if calculated hash matches stored hash...')

            ## Checks if read hash matches stored hash
            if ( tagHash == expectedTagHash ):
                print('Hashes match!')
                print('Check for user "' + userName + '" was successful!')
            else:
                raise Exception('The found tag is not assigned to user!')

        except Exception as e:
            print('[Exception] Check for user "' + userName + '" failed: ' + str(e))
            return False

        return True


if ( __name__ == '__main__' ):

    parser = argparse.ArgumentParser(description='PAM RFID configuration program:')

    parser.add_argument('--add-user', metavar='NAME', help='Adds a new user.')
    parser.add_argument('--remove-user', metavar='NAME', help='Removes a user.')
    parser.add_argument('--check-user', metavar='NAME', help='Checks RFID tag for an existing user.')
    parser.add_argument('--version', '-v', action='version', version='PAM RFID '+ VERSION, help='Prints version and exits.')

    args = vars(parser.parse_args())

    if ( args['add_user'] ):
        PamRfid().addUser(args['add_user'])
    elif ( args['remove_user'] ):
        PamRfid().removeUser(args['remove_user'])
    elif ( args['check_user'] ):
        PamRfid().checkUser(args['check_user'])
    else:
        parser.print_help()
